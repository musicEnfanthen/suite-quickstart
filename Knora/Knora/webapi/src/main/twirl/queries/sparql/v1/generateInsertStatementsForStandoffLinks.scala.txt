@*
 * Copyright Â© 2015-2018 the contributors (see Contributors.md).
 *
 * This file is part of Knora.
 *
 * Knora is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Knora is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public
 * License along with Knora.  If not, see <http://www.gnu.org/licenses/>.
 *@

@import org.knora.webapi._
@import org.knora.webapi.twirl.SparqlTemplateLinkUpdate
@import org.knora.webapi.messages.v1.responder.valuemessages._

@**
 * Generates statements to be added to the INSERT clause of a SPARQL update to insert direct links and LinkValues
 * for Standoff resource references, when creating new values (as opposed to new versions of existing values).
 * This template is used in two contexts: when creating a single text value in an existing resource, and when
 * creating a new resource with its initial values.
 *
 * @param the IRI of the resource in which values are being created.
 * @param linkUpdates a list of [[LinkUpdate]] objects describing links and LinkValues that need to be
 *        updated for resource references in Standoff text values.
 * @param currentTime an xsd:dateTimeStamp representing the current time.
 *@
@(resourceIri: IRI,
  linkUpdates: Seq[SparqlTemplateLinkUpdate],
  currentTime: String)

        @for((linkUpdate, linkValueIndex) <- linkUpdates.zipWithIndex) {
            @* Insert a direct link for the resource reference if necessary. *@
            @if(linkUpdate.insertDirectLink) {
                <@resourceIri> <@linkUpdate.linkPropertyIri> <@linkUpdate.linkTargetIri> .
            }

            @* Insert a LinkValue for the resource reference. *@
            <@linkUpdate.newLinkValueIri> rdf:type knora-base:LinkValue ;
                rdf:subject <@resourceIri> ;
                rdf:predicate <@linkUpdate.linkPropertyIri> ;
                rdf:object <@linkUpdate.linkTargetIri> ;
                knora-base:valueHasString "@linkUpdate.linkTargetIri" ;
                knora-base:valueHasRefCount @linkUpdate.newReferenceCount ;
                knora-base:isDeleted false ;
                knora-base:valueCreationDate "@currentTime"^^xsd:dateTimeStamp .

            <@linkUpdate.newLinkValueIri> knora-base:attachedToUser <@linkUpdate.newLinkValueCreator> ;
                knora-base:hasPermissions "@linkUpdate.newLinkValuePermissions" .

            @*

            If this template is being used to create a single text value containing standoff links, the new LinkValue
            we are creating may be a new version of an existing LinkValue (linkUpdate.linkValueExists will be true).
            In that case, the WHERE clause will have already bound a SPARQL variable ?linkValue@linkValueIndex,
            containing the IRI of the existing LinkValue. In that case, add a triple indicating that the new LinkValue
            is a new version of the existing one.

            If this template is being used to create a new resource with its initial values, there won't be any existing
            LinkValues for standoff links, so linkUpdate.linkValueExists will be false.

            *@
            @if(linkUpdate.linkValueExists) {
                <@linkUpdate.newLinkValueIri> knora-base:previousValue ?linkValue@linkValueIndex .
            }

            @* Attach the new LinkValue to its containing resource. *@
            <@resourceIri> <@{linkUpdate.linkPropertyIri}Value> <@linkUpdate.newLinkValueIri> .
        }
