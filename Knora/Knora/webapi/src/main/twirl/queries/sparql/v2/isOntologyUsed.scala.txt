@*
 * Copyright Â© 2015-2018 the contributors (see Contributors.md).
 *
 * This file is part of Knora.
 *
 * Knora is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Knora is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public
 * License along with Knora.  If not, see <http://www.gnu.org/licenses/>.
 *@

@import org.knora.webapi.util.SmartIri

@*
 * Checks whether any entity in an ontology is used in data or in other ontologies. Returns at most 50 subjects that
 * refer to entities in the ontology.
 *
 * @param triplestore the name of the triplestore being used.
 * @param ontologyNamedGraphIri the IRI of the ontology's named graph.
 * @param classIris the IRIs of all the classes in the ontology.
 * @param propertyIris the IRIs of all the properties in the ontology.
 *@
@(triplestore: String,
  ontologyNamedGraphIri: SmartIri,
  classIris: Set[SmartIri],
  propertyIris: Set[SmartIri])

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX knora-base: <http://www.knora.org/ontology/knora-base#>

SELECT DISTINCT ?s
@* Ensure that inference is not used in this query. *@
@if(triplestore.startsWith("graphdb")) {
    FROM <http://www.ontotext.com/explicit>
}
WHERE {

    @for((propertyIri, index) <- propertyIris.toVector.zipWithIndex) {

        @if(index > 0) {

            UNION

        }

        {

            @*

            Check that there is no data that uses propertyIri. We don't need to check for data that uses
            a subproperty of propertyIri, because there are only two ways this can happen:

            1. The subproperty is defined in the same ontology, so it will be included in propertyIris.
            2. The subproperty is defined in another ontology, so the next branch of the UNION
               will find it, whether or not any data uses the subproperty.

            *@

            ?s <@propertyIri> ?o .

        } UNION {

            @* Check that there are no references to the property in other ontology graphs. *@

            GRAPH ?g {

                ?ontology rdf:type owl:Ontology .
                ?s ?pred <@propertyIri> .

            }

            FILTER (?g != <@ontologyNamedGraphIri>)

        }

    }

    @for((classIri, index) <- classIris.toVector.zipWithIndex) {

        @if(propertyIris.nonEmpty || index > 0) {

            UNION

        }

        {
            @*

            Check that there is no data that uses classIri. We don't need to check for data that uses
            a subclass of classIri, because there are only two ways this can happen:

            1. The subclass is defined in the same ontology, so it will be included in classIris.
            2. The subclass is defined in another ontology, so the next branch of the UNION
               will find it, whether or not any data uses the subclass.

            *@

            ?s rdf:type <@classIri> .

        } UNION {

            @* Check that there are no references to the class in other ontology graphs. *@

            GRAPH ?g {

                ?ontology rdf:type owl:Ontology .
                ?s ?pred <@classIri> .

            }

            FILTER (?g != <@ontologyNamedGraphIri>)

        }

    }
}
LIMIT 50
