@*
 * Copyright Â© 2015-2018 the contributors (see Contributors.md).
 *
 * This file is part of Knora.
 *
 * Knora is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Knora is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public
 * License along with Knora.  If not, see <http://www.gnu.org/licenses/>.
 *@

@import org.knora.webapi.IRI

@**
 * Gets the values of all the Knora properties of a resource that have values, using standard SPARQL, without inference.
 *
 * This template is used only by getResourcePropertiesAndValues.scala.txt.
 *
 * @param triplestore the name of the triplestore being used.
 * @param resourceIri the IRI of the resource to be queried.
 *@
@(triplestore: String,
  resourceIri: IRI)

prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix knora-base: <http://www.knora.org/ontology/knora-base#>

SELECT ?prop ?isLinkProp ?isLinkValueProp ?obj ?objPred ?objObj ?predStandoff ?objStandoff
WHERE {
    BIND(IRI("@resourceIri") as ?resource)

    ?resource rdf:type ?resourceClass ;
        knora-base:isDeleted false .
    ?resourceClass rdfs:subClassOf* knora-base:Resource .

    {
        @* Get properties that point to Value objects. *@

        ?prop rdfs:subPropertyOf* knora-base:hasValue .

        @* Exclude FileValue objects, because if the resource is a representation, we get its file values with its resource info. *@
        FILTER NOT EXISTS {
            ?prop rdfs:subPropertyOf* knora-base:hasFileValue .
        }

        @* Identify properties that point to LinkValue objects. *@
        OPTIONAL {
            ?prop rdfs:subPropertyOf* knora-base:hasLinkToValue .

            BIND(true as ?isLinkValueProp)
        }

        {
            @* Get the project of the containing resource. *@

            ?resource ?prop ?obj .
            ?obj knora-base:isDeleted false .
            ?resource knora-base:attachedToProject ?resourceProject .
            BIND(knora-base:attachedToProject AS ?objPred)
        	BIND(COALESCE(?valueProject, ?resourceProject) AS ?objObj)
        }
        UNION
        {
            @* Get the value's standoff markup nodes if it has any. *@

            ?resource ?prop ?obj .
            ?obj knora-base:isDeleted false .
            ?obj a knora-base:TextValue .
            BIND(knora-base:valueHasStandoff AS ?objPred)
	        ?obj ?objPred ?objObj .
            ?objObj ?predStandoff ?objStandoff .
        }
        UNION
        {
            @* Get any other statements about the value. *@

            ?resource ?prop ?obj .
            ?obj knora-base:isDeleted false .
	        ?obj ?objPred ?objObj .

            FILTER(!(?objPred = knora-base:attachedToProject || ?objPred = knora-base:valueHasStandoff))
        }
    }
    UNION
    {
        @* Get link properties, i.e. properties that point to other Resource objects. *@

        ?prop rdfs:subPropertyOf* knora-base:hasLinkTo .
        BIND(true AS ?isLinkProp)

        ?resource ?prop ?obj .
        ?obj knora-base:isDeleted false .
        ?obj ?objPred ?objObj .
    }
}
