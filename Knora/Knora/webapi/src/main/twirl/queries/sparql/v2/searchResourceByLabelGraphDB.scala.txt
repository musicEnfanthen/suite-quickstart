@*
 * Copyright Â© 2015-2018 the contributors (see Contributors.md).
 *
 * This file is part of Knora.
 *
 * Knora is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Knora is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public
 * License along with Knora.  If not, see <http://www.gnu.org/licenses/>.
 *@

@import org.knora.webapi.IRI
@import org.knora.webapi.SparqlGenerationException
@import org.knora.webapi.util.search.ApacheLuceneSupport.MatchStringWhileTyping

@*
 * Performs a search for resources by their label.
 *
 * @param searchTerm search terms.
 * @param limitToProject limit search to the given project.
 * @param limitToResourceClass limit search to given resource class.
 * @param limit maximum amount of resources to be returned.
 * @param offset offset to be used for paging.
 * @param countQuery indicates whether it is a count query or the actual resources should be returned.
 *@
@(searchTerm: MatchStringWhileTyping,
  limitToProject: Option[IRI],
  limitToResourceClass: Option[IRI],
  limit: Int,
  offset: Int,
  countQuery: Boolean)

PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX knora-base: <http://www.knora.org/ontology/knora-base#>

@if(!countQuery) {
CONSTRUCT {
    ?resource rdfs:label ?label ;
        a knora-base:Resource ;
        knora-base:isMainResource true ;
		a ?resourceType ;
        knora-base:attachedToUser ?resourceCreator ;
        knora-base:hasPermissions ?resourcePermissions ;
        knora-base:attachedToProject ?referredResourceProject .

        # include this inferred information in the results, needed to identify value properties
    ?resource knora-base:hasValue ?valueObject ;
        ?resourceValueProperty ?valueObject .
    ?valueObject ?valueObjectProperty ?valueObjectValue .

} WHERE {
    {
        @{
        queries.sparql.v2.txt.searchResourceByLabelSubQuerySelectGraphDB(
            searchTerm = searchTerm,
            limitToProject = limitToProject,
            limitToResourceClass = limitToResourceClass,
            limit = limit,
            offset = offset,
            countQuery = countQuery)
        }
    }

    {
        GRAPH <http://www.ontotext.com/explicit> {
            ?resource a ?resourceType .
        }

        ?resource knora-base:attachedToUser ?resourceCreator ;
                knora-base:hasPermissions ?resourcePermissions ;
                knora-base:attachedToProject ?referredResourceProject  .
    }
    # there might by resources that have neither values nor links
    UNION {

            ?resource knora-base:hasValue ?valueObject .

            ?valueObject a knora-base:Value .

            GRAPH <http://www.ontotext.com/explicit> {
                ?resource ?resourceValueProperty ?valueObject .

                ?valueObject knora-base:isDeleted false ;
                    a ?valueObjectType ;
                    ?valueObjectProperty ?valueObjectValue .
            }

            FILTER(?valueObjectType != knora-base:LinkValue)
    }
}
} else {
    @{
            queries.sparql.v2.txt.searchResourceByLabelSubQuerySelectGraphDB(
                searchTerm = searchTerm,
                limitToProject = limitToProject,
                limitToResourceClass = limitToResourceClass,
                limit = limit,
                offset = offset,
                countQuery = countQuery)
            }
}