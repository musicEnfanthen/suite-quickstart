@*
 * Copyright Â© 2015-2018 the contributors (see Contributors.md).
 *
 * This file is part of Knora.
 *
 * Knora is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Knora is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public
 * License along with Knora.  If not, see <http://www.gnu.org/licenses/>.
 *@

@import org.knora.webapi.IRI
@import org.knora.webapi.SparqlGenerationException

@*
 * Performs a search for resources matching the given criteria.
 *
 * If the triplestore type is GraphDB, this template delegates to getResourceSearchResultGraphDB.sparql.txt, which is
 * optimised for GraphDB. Otherwise, it delegates to getResourceSearchResultStandard.sparql.txt.
 *
 * @param triplestore the name of the triplestore being used.
 * @param phrase the search phrase (e.g. "Reise ins").
 * @param lastTerm the last search term (e.g. "Heili").
 * @param resourceTypeIri if set, restricts search to this resource class and its subclasses.
 * @param numberOfProps the amount of describing properties to be returned for each found resource (e.g if set to two,
 *                      for an incunabula book its title and creator would be returned).
 * @param limitOfResults limits number of resources to be returned.
 * @param separator the separator to be used when concatenating the value strings.
 *@
@(triplestore: String,
  phrase: Option[String],
  lastTerm: String,
  restypeIriOption: Option[IRI],
  numberOfProps: Int,
  limitOfResults: Int,
  separator: Char)

@if(triplestore.startsWith("graphdb")) {
    @{
        queries.sparql.v1.txt.getResourceSearchResultGraphDB(phrase = phrase,
                                                             lastTerm = lastTerm,
                                                             restypeIriOption = restypeIriOption,
                                                             numberOfProps = numberOfProps,
                                                             limitOfResults = limitOfResults,
                                                             separator = separator)
    }
} else {
    @{
        queries.sparql.v1.txt.getResourceSearchResultStandard(triplestore = triplestore,
                                                              phrase = phrase,
                                                              lastTerm = lastTerm,
                                                              restypeIriOption = restypeIriOption,
                                                              numberOfProps = numberOfProps,
                                                              limitOfResults = limitOfResults,
                                                              separator = separator)
    }
}
