@*
 * Copyright Â© 2015-2018 the contributors (see Contributors.md).
 *
 * This file is part of Knora.
 *
 * Knora is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Knora is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public
 * License along with Knora.  If not, see <http://www.gnu.org/licenses/>.
 *@

@import org.knora.webapi.IRI
@import org.knora.webapi.SparqlGenerationException
@import org.knora.webapi.util.search.ApacheLuceneSupport.MatchStringWhileTyping

@*
 * Performs a search for resources by their label.
 *
 * If the triplestore type is GraphDB, this template delegates to searchResourceByLabelGraphDB.sparql.txt, which is optimised
 * for GraphDB. Otherwise, it delegates to searchResourceByLabelStandard.sparql.txt.
 *
 * @param triplestore the name of the triplestore being used.
 * @param searchTerms search terms.
 * @param limitToProject limit search to the given project.
 * @param limitToResourceClass limit search to given resource class.
 * @param limit maximum amount of resources to be returned.
 * @param offset offset to be used for paging.
 * @param countQuery indicates whether it is a count query or the actual resources should be returned.
 *@
@(triplestore: String,
  searchTerm: MatchStringWhileTyping,
  limitToProject: Option[IRI],
  limitToResourceClass: Option[IRI],
  limit: Int,
  offset: Int,
  countQuery: Boolean)

@if(triplestore.startsWith("graphdb")) {
    @{
        queries.sparql.v2.txt.searchResourceByLabelGraphDB(
            searchTerm = searchTerm,
            limitToProject = limitToProject,
            limitToResourceClass = limitToResourceClass,
            limit = limit,
            offset = offset,
            countQuery = countQuery
        )
    }
} else {
    @{
        queries.sparql.v2.txt.searchResourceByLabelStandard(
            triplestore = triplestore,
            searchTerm = searchTerm,
            limitToProject = limitToProject,
            limitToResourceClass = limitToResourceClass,
            limit = limit,
            offset = offset,
            countQuery = countQuery
        )
    }
}