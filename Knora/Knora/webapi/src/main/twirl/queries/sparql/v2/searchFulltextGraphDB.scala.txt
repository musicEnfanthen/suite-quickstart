@*
 * Copyright Â© 2015-2018 the contributors (see Contributors.md).
 *
 * This file is part of Knora.
 *
 * Knora is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Knora is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public
 * License along with Knora.  If not, see <http://www.gnu.org/licenses/>.
 *@

@import org.knora.webapi.IRI
@import org.knora.webapi.SparqlGenerationException
@import org.knora.webapi.GravsearchException
@import org.knora.webapi.util.search.ApacheLuceneSupport.CombineSearchTerms

@*
 * Performs a simple full-text search using GraphDB.
 *
 * This template is used only by searchFulltext.scala.txt.
 *
 * Since the triplestore type is GraphDB, we assume that inference is enabled, and we use it to optimise the generated
 * SPARQL. Specifically, we use inference to return search results matching subclasses of the resource class
 * specified by the user. This requires us to use GraphDB's GRAPH <http://www.ontotext.com/explicit> whenever
 * we need to get explicit (non-inferred) statements.
 *
 * @param searchTerms search terms.
 * @param separator the separator to be used in aggregation functions.
 * @param limitToProject limit search to the given project.
 * @param limitToResourceClass limit search to given resource class.
 * @param limitToStandoffClass limit the search to given standoff class.
 * @param limit maximal amount of rows to be returned
 * @param offset offset for paging (starts with 0)
 * @param countQuery indicates whether it is a count query or the actual resources should be returned.
 *@
@(searchTerms: CombineSearchTerms,
  limitToProject: Option[IRI],
  limitToResourceClass: Option[IRI],
  limitToStandoffClass: Option[IRI],
  separator: Option[Char],
  limit: Int,
  offset: Int,
  countQuery: Boolean)

PREFIX knora-base: <http://www.knora.org/ontology/knora-base#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

@if(!countQuery) {
SELECT DISTINCT ?resource (GROUP_CONCAT(?valueObject; separator="@separator.getOrElse(throw GravsearchException("Separator expected for non count query, but none given"))") AS ?valueObjectConcat)
} else {
    SELECT (count(distinct ?resource) as ?count)
}
WHERE {

    {
        SELECT DISTINCT ?matchingSubject WHERE {

            GRAPH <http://www.ontotext.com/explicit> {
                ?matchingSubject ?matchingProperty ?literal .
            }

            ?literal <http://www.ontotext.com/owlim/lucene#fullTextSearchIndex> '@searchTerms.combineSearchTermsWithLogicalAnd' .

            @* standoff search *@
            @if(limitToStandoffClass.nonEmpty) {

                # ?matchingSubject is expected to be a TextValue
                ?matchingSubject a knora-base:TextValue .

                ?matchingSubject knora-base:valueHasStandoff ?standoffNode .

                ?standoffNode a <@limitToStandoffClass.get> .

                ?standoffNode knora-base:standoffTagHasStart ?start .

                ?standoffNode knora-base:standoffTagHasEnd ?end .

                # https://www.w3.org/TR/xpath-functions/#func-substring
                # The first character of a string is located at position 1, not position 0. -> standoff uses a 0 based index
                BIND(SUBSTR(?literal, ?start+1, ?end - ?start) AS ?markedup)

                @* Loop over search terms and make sure they are all contained in the specified standoff markup *@
                @for(term <- searchTerms.terms) {
                    FILTER REGEX(?markedup, '@term', "i")
                }

             }
        }
    }

    OPTIONAL {
        ?matchingSubject a knora-base:Value .

        GRAPH <http://www.ontotext.com/explicit> {
            ?matchingSubject knora-base:isDeleted false .
            ?matchingSubject a ?valueObjectType .
        }

        FILTER(?valueObjectType != knora-base:LinkValue && ?valueObjectType != knora-base:ListValue)

        ?containingResource knora-base:hasValue ?matchingSubject .

        # this variable will only be bound if the search matched a value object
        BIND(?matchingSubject AS ?valueObject)

    }

    # If the previous OPTIONAL clause was executed, ?matchingSubject is a value object, and ?containingResource will be set.
    # Otherwise, ?matchingSubject is a resource (its rdfs:label matched the search pattern).
    BIND(COALESCE(?containingResource, ?matchingSubject) AS ?resource)

    ?resource a knora-base:Resource ;
        knora-base:isDeleted false .

    @if(limitToResourceClass.nonEmpty) {
        ?resource a <@limitToResourceClass.get> .
    }

    @if(limitToProject.nonEmpty) {
        ?resource knora-base:attachedToProject <@limitToProject.get>
    }

}
@if(!countQuery) {
GROUP BY ?resource
ORDER BY ?resource
OFFSET @offset
}
LIMIT @limit