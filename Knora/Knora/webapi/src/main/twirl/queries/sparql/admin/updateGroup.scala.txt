@*
 * Copyright Â© 2015-2018 the contributors (see Contributors.md).
 *
 * This file is part of Knora.
 *
 * Knora is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Knora is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public
 * License along with Knora.  If not, see <http://www.gnu.org/licenses/>.
 *@

@import org.knora.webapi.IRI

@**
 * Updates an existing group with the provided values.
 *
 * @param dataNamedGraph the named graph to update.
 * @param triplestore      the name of the triplestore being used. The template uses this value to exclude inferred
                           results from the WHERE clause of the update.
 * @param groupIri         the IRI of the group we want to update.
 * @param maybeName        the new optional value for name.
 * @param maybeDescription the new optional value for description.
 * @param maybeProject     the new optional value for project.
 * @param maybeStatus      the new optional value for status.
 * @param maybeSelfjoin    the new optional value for selfjoin.
 *@
@(adminNamedGraphIri: IRI,
  triplestore: String,
  groupIri: IRI,
  maybeName: Option[String],
  maybeDescription: Option[String],
  maybeProject: Option[IRI],
  maybeStatus: Option[Boolean],
  maybeSelfjoin: Option[Boolean])

prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
prefix knora-base: <http://www.knora.org/ontology/knora-base#>

WITH <@adminNamedGraphIri>
DELETE {

    @* Delete current values, for which we have a new one. *@

    @if(maybeName.nonEmpty) {
        ?group knora-base:groupName ?currentName .
    }

    @if(maybeDescription.nonEmpty) {
        ?group knora-base:groupDescription ?currentDescription .
    }

    @if(maybeProject.nonEmpty) {
        ?group knora-base:belongsToProject ?currentProject .
    }

    @if(maybeStatus.nonEmpty) {
        ?group knora-base:status ?currentStatus .
    }

    @if(maybeSelfjoin.nonEmpty) {
        ?group knora-base:hasSelfJoinEnabled ?currentSelfjoin .
    }



} INSERT {

    @* Add the new values. *@

    @if(maybeName.nonEmpty) {
        ?group knora-base:groupName "@maybeName.get"^^xsd:string .
    }

    @if(maybeDescription.nonEmpty) {
        ?group knora-base:groupDescription """@maybeDescription.get"""^^xsd:string .
    }

    @if(maybeProject.nonEmpty) {
        ?group knora-base:belongsToProject <@maybeProject.get> .
    }

    @if(maybeStatus.nonEmpty) {
        ?group knora-base:status "@maybeStatus.get"^^xsd:boolean .
    }

    @if(maybeSelfjoin.nonEmpty) {
        ?group knora-base:hasSelfJoinEnabled "@maybeSelfjoin.get"^^xsd:boolean .
    }
}

@*

GraphDB's consistency checking requires reasoning, but reasoning interferes with certain things
in the WHERE clauses of our SPARQL updates, so we set a GraphDB-specific flag to return only
explicit statements in the WHERE clause here.

*@

@triplestore match {
    case "graphdb" | "graphdb-free" => {
        USING <http://www.ontotext.com/explicit>
    }

    case other => {}
}

WHERE {
    BIND(IRI("@groupIri") AS ?group)

    @* Get all current defined values. *@

    ?group knora-base:groupName ?currentName .

    optional {?group knora-base:groupDescription ?currentDescription .}

    ?group knora-base:belongsToProject ?currentProject .

    ?group knora-base:status ?currentStatus .

    ?group knora-base:hasSelfJoinEnabled ?currentSelfjoin .
}
