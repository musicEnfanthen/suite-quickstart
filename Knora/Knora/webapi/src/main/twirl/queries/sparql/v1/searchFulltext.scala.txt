@*
 * Copyright Â© 2015-2018 the contributors (see Contributors.md).
 *
 * This file is part of Knora.
 *
 * Knora is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Knora is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public
 * License along with Knora.  If not, see <http://www.gnu.org/licenses/>.
 *@

@import org.knora.webapi.IRI
@import org.knora.webapi.SparqlGenerationException

@*
 * Performs a simple full-text search. The number of rows returned per matching resource is equal to the
 * number of values that matched in the resource, plus one if the resource's label matched.
 *
 * If the triplestore type is GraphDB, this template delegates to searchFulltextGraphDB.sparql.txt, which is optimised
 * for GraphDB. Otherwise, it delegates to searchFulltextStandard.sparql.txt.
 *
 * @param triplestore the name of the triplestore being used.
 * @param searchTerms search terms to be combined with AND in Lucene full-text search syntax.
 * @param preferredLanguage the language code of the user's preferred language.
 * @param fallbackLanguage the language code of the application's default language.
 * @param projectIriOption if filtering by project is desired, the IRI of the project to search.
 * @param restypeIriOption if given, searches only for resources of this class and its subclasses.
 *@
@(triplestore: String,
  searchTerms: Seq[String],
  preferredLanguage: String,
  fallbackLanguage: String,
  projectIriOption: Option[IRI],
  restypeIriOption: Option[IRI])

@if(triplestore.startsWith("graphdb")) {
    @{
        queries.sparql.v1.txt.searchFulltextGraphDB(searchTerms = searchTerms,
                                                    preferredLanguage = preferredLanguage,
                                                    fallbackLanguage = fallbackLanguage,
                                                    projectIriOption = projectIriOption,
                                                    restypeIriOption = restypeIriOption)
    }
} else {
    @{
        queries.sparql.v1.txt.searchFulltextStandard(triplestore = triplestore,
                                                     searchTerms = searchTerms,
                                                     preferredLanguage = preferredLanguage,
                                                     fallbackLanguage = fallbackLanguage,
                                                     projectIriOption = projectIriOption,
                                                     restypeIriOption = restypeIriOption)
    }
}
