@*
 * Copyright Â© 2015-2018 the contributors (see Contributors.md).
 *
 * This file is part of Knora.
 *
 * Knora is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Knora is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public
 * License along with Knora.  If not, see <http://www.gnu.org/licenses/>.
 *@

@import org.knora.webapi._
@import org.knora.webapi.twirl.SparqlTemplateLinkUpdate
@import org.knora.webapi.messages.v1.responder.valuemessages._

@**
 * Generates statements to be added to the INSERT clause of a SPARQL update when creating a new link between resources.
 * This template is used in two contexts: when creating a single link in an existing resource, and when creating
 * a new resource with its initial values.
 *
 * @param resourceIri     the IRI of the resource.
 * @param linkUpdate a [[LinkUpdate]] object describing the link to insert.
 * @param currentTime an xsd:dateTimeStamp representing the current time.
 * @param maybeComment an optional comment on the link.
 * @param the knora-base:valueHasOrder of the new value. If not provided, the SPARQL variable ?nextOrder will be used.
 *@
@(resourceIri: IRI,
  linkUpdate: SparqlTemplateLinkUpdate,
  currentTime: String,
  maybeComment: Option[String],
  maybeValueHasOrder: Option[Int])

        # Value: @linkUpdate.newLinkValueIri
        # Property: @linkUpdate.linkPropertyIri

        @* Insert a direct link between the source and target resources. *@
        @if(linkUpdate.insertDirectLink) {
            <@resourceIri> <@linkUpdate.linkPropertyIri> <@linkUpdate.linkTargetIri> .
        } else {
            @{throw SparqlGenerationException(s"LinkUpdate.insertDirectLink must be true in this SPARQL template (for value @index)"); ()}
        }

        @* Insert a LinkValue describing the link. *@
        <@linkUpdate.newLinkValueIri> rdf:type knora-base:LinkValue ;
            rdf:subject <@resourceIri> ;
            rdf:predicate <@linkUpdate.linkPropertyIri> ;
            rdf:object <@linkUpdate.linkTargetIri> ;
            knora-base:valueHasString "@linkUpdate.linkTargetIri"^^xsd:string ;
            knora-base:valueHasRefCount @linkUpdate.newReferenceCount ;
            @maybeComment match {
                case Some(comment) => {
                    knora-base:valueHasComment """@comment""" ;
                }

                case None => {}
            }
            @maybeValueHasOrder match {
                case Some(order) => {
                    knora-base:valueHasOrder @order ;
                }

                case None => {
                    knora-base:valueHasOrder ?nextOrder ;
                }
            }
            knora-base:isDeleted false ;
            knora-base:valueCreationDate "@currentTime"^^xsd:dateTimeStamp ;
            knora-base:attachedToUser <@linkUpdate.newLinkValueCreator> ;
            knora-base:hasPermissions "@linkUpdate.newLinkValuePermissions"^^xsd:string .

        @* Attach the new LinkValue to its containing resource. *@
        <@resourceIri> <@{linkUpdate.linkPropertyIri}Value> <@linkUpdate.newLinkValueIri> .
