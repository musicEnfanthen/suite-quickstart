@*
 * Copyright Â© 2015-2018 the contributors (see Contributors.md).
 *
 * This file is part of Knora.
 *
 * Knora is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Knora is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public
 * License along with Knora.  If not, see <http://www.gnu.org/licenses/>.
 *@

@import org.knora.webapi.IRI
@import org.knora.webapi.SparqlGenerationException

@*
 * Performs a search for resources matching the given criteria, using standard SPARQL (except for the interface to
 * Lucene, which is triplestore-specific), and without inference.
 *
 * This template is used only by getResourceSearchResult.scala.txt.
 *
 * @param triplestore the name of the triplestore being used.
 * @param phrase the search phrase (e.g. "Reise ins").
 * @param lastTerm the last search term (e.g. "Heili").
 * @param resourceTypeIri if set, restricts search to this resource class and its subclasses.
 * @param numberOfProps the amount of describing properties to be returned for each found resource (e.g if set to two,
 *                      for an incunabula book its title and creator would be returned).
 * @param limitOfResults limits number of resources to be returned.
 * @param separator the separator to be used when concatenating the value strings.
 *@
@(triplestore: String,
  phrase: Option[String],
  lastTerm: String,
  restypeIriOption: Option[IRI],
  numberOfProps: Int,
  limitOfResults: Int,
  separator: Char)

PREFIX knora-base: <http://www.knora.org/ontology/knora-base#>
PREFIX salsah-gui: <http://www.knora.org/ontology/salsah-gui#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?resourceIri ?resourceClass ?firstProp ?attachedToUser ?attachedToProject ?resourcePermissions
@if(numberOfProps > 1) {
    (GROUP_CONCAT(?valueString; separator="@separator") AS ?values) (GROUP_CONCAT(?property; separator="@separator") AS ?properties) (GROUP_CONCAT(?valueOrder; separator="@separator") AS ?valueOrders)
}
WHERE {

    @*

    Use Query Parser Syntax: https://lucene.apache.org/core/3_6_2/queryparsersyntax.html

    Combine the phrase (to be enclosed by double quotes) with the last term with a wildcard at the end.
    This finds allthe strings that contain the exact phrase and the term with the wildcard.
    Example: "Reise ins" "Heili" -> "Reise ins" AND Heili*

    Apply filter statement containing a regex to make sure that lastTerm directly follows the phrase
    (only necessary if we have several terms to search for).

    *@

    @triplestore match {

        case "embedded-jena-tdb" | "fuseki" => {

            ?resourceIri <http://jena.apache.org/text#query> '@if(phrase.nonEmpty){"@phrase" AND }@lastTerm*' .
            ?resourceIri rdfs:label ?firstProp .
            @if(phrase.nonEmpty){FILTER regex(?firstProp, "@phrase @lastTerm*", "i") .}

        }

        case other => {
            @{throw SparqlGenerationException(s"Triplestore type $other is not supported in this SPARQL template"); ()}
        }
    }

    ?resourceIri knora-base:isDeleted false .

    @restypeIriOption match {

        case Some(restypeIri) => {

            # Filter by resource class.

            ?resClass rdfs:subClassOf* <@restypeIri> .
            ?resourceIri a ?resClass .

        }

        case None => {

            @* Ensure that each matching resource is a knora-base:Resource. *@

            ?resClass rdfs:subClassOf* knora-base:Resource .
            ?resourceIri a ?resClass .

        }
    }

    @if(numberOfProps > 1) {

        ?resourceIri ?property ?valueObjectIri .
        ?property knora-base:objectClassConstraint knora-base:TextValue .
        ?valueObjectIri knora-base:valueHasString ?valueString ;
            knora-base:isDeleted false ;
            knora-base:valueHasOrder ?valueOrder .

    }

    ?resourceIri a ?resourceClass ;
        knora-base:attachedToUser ?attachedToUser ;
        knora-base:attachedToProject ?attachedToProject ;
        knora-base:hasPermissions ?resourcePermissions .
}

GROUP BY ?resourceIri ?resourceClass ?firstProp ?attachedToUser ?attachedToProject ?resourcePermissions

LIMIT @limitOfResults
