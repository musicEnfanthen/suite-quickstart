@*
 * Copyright Â© 2015-2018 the contributors (see Contributors.md).
 *
 * This file is part of Knora.
 *
 * Knora is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Knora is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public
 * License along with Knora.  If not, see <http://www.gnu.org/licenses/>.
 *@

@import org.knora.webapi.IRI
@import org.knora.webapi.SparqlGenerationException
@import org.knora.webapi.util.search.ApacheLuceneSupport.CombineSearchTerms

@*
 * Performs a simple full-text search using standard SPARQL (except for the interface to Lucene, which is
 * triplestore-specific), and without inference.
 *
 * The number of rows returned per matching resource is equal to the number of values that matched in the resource,
 * plus one if the resource's label matched.
 *
 * This template is used only by searchFulltext.scala.txt.
 *
 * @param triplestore the name of the triplestore being used.
 * @param searchTerms search terms.
 * @param limitToProject limit search to the given project.
 * @param limitToResourceClass limit search to given resource class.
 * @param limitToStandoffClass limit the search to given standoff class.
 * @param separator the separator to be used in aggregation functions.
 * @param limit maximal amount of rows to be returned
 * @param offset offset for paging (starts with 0)
 * @param countQuery indicates whether it is a count query or the actual resources should be returned.
 *@
@(triplestore: String,
  searchTerms: CombineSearchTerms,
  limitToProject: Option[IRI],
  limitToResourceClass: Option[IRI],
  limitToStandoffClass: Option[IRI],
  separator: Option[Char],
  limit: Int,
  offset: Int,
  countQuery: Boolean)

@*

    TODO: To be implemented

*@