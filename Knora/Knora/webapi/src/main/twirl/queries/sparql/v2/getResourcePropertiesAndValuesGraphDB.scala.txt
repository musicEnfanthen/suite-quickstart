@*
 * Copyright Â© 2015-2018 the contributors (see Contributors.md).
 *
 * This file is part of Knora.
 *
 * Knora is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Knora is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public
 * License along with Knora.  If not, see <http://www.gnu.org/licenses/>.
 *@

@import org.knora.webapi.IRI
@import org.knora.webapi.SparqlGenerationException

@*
 * Performs a resource request using GraphDB.
 *
 * This template is used only by getResourcePropertiesAndValues.scala.txt.
 *
 *
 * @param resourceIris the Iris of the requested resources.
 * @param preview indicates if the request should only return preview information.
 *@
@(resourceIris: Seq[IRI],
preview: Boolean)

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX knora-base: <http://www.knora.org/ontology/knora-base#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
CONSTRUCT {
    # include this inferred information in the results, needed to identify resources
    ?resource a knora-base:Resource ;
        knora-base:isMainResource true ;
        knora-base:attachedToProject ?resourceProject ;
        rdfs:label ?label ;
        a ?resourceType ;
        knora-base:attachedToUser ?resourceCreator ;
        knora-base:hasPermissions ?resourcePermissions .

    # include this inferred information in the results, needed to identify value properties
    ?resource knora-base:hasValue ?valueObject ;
        ?resourceValueProperty ?valueObject .
    ?valueObject ?valueObjectProperty ?valueObjectValue .

    ?standoffNode ?standoffProperty ?standoffValue .

    # include this inferred information in the results, needed to identify linking properties
    ?resource knora-base:hasLinkTo ?referredResource ;
        ?resourceLinkProperty ?referredResource .

    ?referredResource a knora-base:Resource ;
        rdfs:label ?referredResourceLabel ;
        a ?referredResourceType ;
        knora-base:attachedToUser ?referredResourceCreator ;
        knora-base:hasPermissions ?referredResourcePermissions ;
        knora-base:attachedToProject ?referredResourceProject .

    ?valueObject knora-base:valueHasListNode  ?listNode .
    ?listNode rdfs:label ?listNodeLabel .

} WHERE {
    VALUES ?resource { @for(resIri <- resourceIris) { <@resIri> } }

    ?resource rdf:type knora-base:Resource ;
        knora-base:isDeleted false ;
        knora-base:attachedToProject ?resourceProject .

    ?resource rdfs:label ?label .

    GRAPH <http://www.ontotext.com/explicit> {
        ?resource a ?resourceType .
    }

    ?resource knora-base:attachedToUser ?resourceCreator ;
            knora-base:hasPermissions ?resourcePermissions .

    @* Check if this a full resource requests *@
    @if(preview == false) {
        # there might by resources that have neither values nor links
        OPTIONAL {
            {
                ?resource knora-base:hasValue ?valueObject .

                ?valueObject a knora-base:Value ;
                    knora-base:isDeleted false .

                {
                    GRAPH <http://www.ontotext.com/explicit> {
                        ?resource ?resourceValueProperty ?valueObject .

                        ?valueObject a ?valueObjectType ;
                            ?valueObjectProperty ?valueObjectValue .
                    }
                } UNION {
                    GRAPH <http://www.ontotext.com/explicit> {
                        ?valueObject knora-base:valueHasStandoff ?standoffNode .
                        ?standoffNode ?standoffProperty ?standoffValue .
                    }
                } UNION {
                     GRAPH <http://www.ontotext.com/explicit> {
                        ?valueObject a knora-base:ListValue .
                        ?valueObject knora-base:valueHasListNode  ?listNode .
                        ?listNode rdfs:label ?listNodeLabel .
                     }
                }
            } UNION {

                ?resource knora-base:hasLinkTo ?referredResource .

                ?referredResource a knora-base:Resource ;
                    knora-base:isDeleted false .

                GRAPH <http://www.ontotext.com/explicit> {
                    ?resource ?resourceLinkProperty ?referredResource .

                    ?referredResource rdfs:label ?referredResourceLabel ;
                        a ?referredResourceType ;
                        knora-base:attachedToUser ?referredResourceCreator ;
                        knora-base:hasPermissions ?referredResourcePermissions ;
                        knora-base:attachedToProject ?referredResourceProject .
                }

            }
        }
    }
}