/*
 * A GraphDB inference rules file based on GraphDB's built-in rules file
 * builtin_RdfsRules.pie, adding rules for Knora-specific consistency checks.
 */

/*  OWLIM rules and axioms for the TRREE engine
 *
 *  From Thu 03-03-2006
 *
 *  Every rule consists of one or more premises and one or more corollaries
 *  in the following format:
 *
 *  Rules
 *  {
 *     Id: Rule_Id
 *     < Premise #1 >
 *     < Premise #2 >
 *         . . .
 *     < Premise #n >
 *  ---------------------
 *    < Corollary #1 >
 *    < Corollary #2 >
 *         . . .
 *    < Corollary #m >
 *  }
 *
 *  Every premise may contain constraints stating that the value of one or
 *  more variables in the statement must not be equal to a full URI, a short name
 *  or the value of another variable from the same rule.
 *  This is written in the following format:
 *
 *         . . . . . . . . . . .
 *     a  <mynamespace:myproperty>  b             [Constraint a != b]
 *     <mynamespace:Instance_1.0>  a  c           [Constraint a != <rdf:type>, c != a, c != b]
 *    -----------------------------------
 *     c  a  b
 *     b  <rdf:type>  <mynamespace:Instance_1.0>  [Constraint b != <http://www.w3.org/2000/01/rdf-schema#Class>]
 *
 *  Every left value in the not-equal constraint must denote a variable
 *  and every right value can be a variable, a short name or a full URI.
 *  Not-equal constraints may be used to force the engine not to apply
 *  the rule when the constraints are not satisfied. This will improve
 *  engine's performance.
 *  Constraints are valid anywhere within the rule-body.
 *  If a variable is not bound yet then the constraint is considered satisfied
 *  (and therefore does not apply).
 *  In the rule head, a constraint only affects the production of the rule conclusion it neighbours.
 *
 *  In addition one or more axioms may be added in the following format:
 *
 *  Axioms
 *  {
 *     < Axiom #1 >
 *     < Axiom #2 >
 *        . . .
 *     < Axiom #n >
 *  }
 *
 *  The premises, the corollaries and the axioms must be written in N-Triple format.
 *  The subject, the predicate and the object must denote a full URI or
 *  a short name in format <Prefix>:<LocalName> where <Prefix> is defined in
 *  the prefix section written in the following format:
 *
 *  Prefices
 *  {
 *     < Prefix #1 > : < Full URI for prefix #1 >
 *     < Prefix #2 > : < Full URI for prefix #2 >
 *            . . . . . . . . . . . . . .
 *     < Prefix #n > : < Full URI for prefix #n >
 *  }
 *
 *  The sections must be arranged in the following order:
 *
 *  Prefices   // If any
 *  {
 *     . . .
 *  }
 *  Axioms     // If any
 *  {
 *     . . .
 *  }
 *  Rules      // Must necessarily be present
 *  {
 *     . . .
 *  }
 *
 *  Variables in the rules must be literals consisting of one symbol only.
 *  They must NOT be surrounded by angle braces.
 *  ONLY rule statements may contain variables.
 *
 *  The contents of this file is translated into java code and is output
 *  to com.ontotext.trree.RdfsHashInferencer and com.ontotext.trree.OwlHashInferencer.
 *  Use program RuleCompiler.java in order to compile this file.
 *  Please do not make changes in file generated files because
 *  next time the translator is started the changes will disappear.
 *
 */

Prefices
{
     rdf         :  http://www.w3.org/1999/02/22-rdf-syntax-ns#
     rdfs        :  http://www.w3.org/2000/01/rdf-schema#
     owl         :  http://www.w3.org/2002/07/owl#
     xsd         :  http://www.w3.org/2001/XMLSchema#
     knora-base  :  http://www.knora.org/ontology/knora-base#
     onto     :  http://www.ontotext.com/
}

Axioms
{
// RDF axiomatic triples (from RDF Semantics, section 3.1):

     <rdf:type> <rdf:type> <rdf:Property>
     <rdf:subject> <rdf:type> <rdf:Property>
     <rdf:predicate> <rdf:type> <rdf:Property>
     <rdf:object> <rdf:type> <rdf:Property>
     <rdf:first> <rdf:type> <rdf:Property>
     <rdf:rest> <rdf:type> <rdf:Property>
     <rdf:value> <rdf:type> <rdf:Property>
     <rdf:nil> <rdf:type> <rdf:List>

// RDFS axiomatic triples (from RDF Semantics, section 4.1):

/*[partialRDFS]*/
     <rdf:type> <rdfs:domain> <rdfs:Resource>

     <rdfs:domain> <rdfs:domain> <rdf:Property>
     <rdfs:range> <rdfs:domain> <rdf:Property>
     <rdfs:subPropertyOf> <rdfs:domain> <rdf:Property>
     <rdfs:subClassOf> <rdfs:domain> <rdfs:Class>
/*[partialRDFS]*/

     <rdf:subject> <rdfs:domain> <rdf:Statement>
     <rdf:predicate> <rdfs:domain> <rdf:Statement>
     <rdf:object> <rdfs:domain> <rdf:Statement>

/*[partialRDFS]*/
     <rdfs:member> <rdfs:domain> <rdfs:Resource>
     <rdf:first> <rdfs:domain> <rdf:List>
     <rdf:rest> <rdfs:domain> <rdf:List>
     <rdfs:seeAlso> <rdfs:domain> <rdfs:Resource>
     <rdfs:isDefinedBy> <rdfs:domain> <rdfs:Resource>
     <rdfs:comment> <rdfs:domain> <rdfs:Resource>
     <rdfs:label> <rdfs:domain> <rdfs:Resource>
     <rdf:value> <rdfs:domain> <rdfs:Resource>

//     <rdf:type> <rdfs:range> <rdfs:Class>
     <rdfs:domain> <rdfs:range> <rdfs:Class>
     <rdfs:range> <rdfs:range> <rdfs:Class>
     <rdfs:subPropertyOf> <rdfs:range> <rdf:Property>
     <rdfs:subClassOf> <rdfs:range> <rdfs:Class>

     <rdf:subject> <rdfs:range> <rdfs:Resource>
     <rdf:predicate> <rdfs:range> <rdfs:Resource>
     <rdf:object> <rdfs:range> <rdfs:Resource>
     <rdfs:member> <rdfs:range> <rdfs:Resource>
     <rdf:first> <rdfs:range> <rdfs:Resource>
     <rdf:rest> <rdfs:range> <rdf:List>

     <rdfs:seeAlso> <rdfs:range> <rdfs:Resource>
     <rdfs:isDefinedBy> <rdfs:range> <rdfs:Resource>
     <rdfs:comment> <rdfs:range> <rdfs:Literal>
     <rdfs:label> <rdfs:range> <rdfs:Literal>

     <rdf:value> <rdfs:range> <rdfs:Resource>
/*[partialRDFS]*/

     <rdf:Alt> <rdfs:subClassOf> <rdfs:Container>
     <rdf:Bag> <rdfs:subClassOf> <rdfs:Container>
     <rdf:Seq> <rdfs:subClassOf> <rdfs:Container>
     <rdfs:ContainerMembershipProperty> <rdfs:subClassOf> <rdf:Property>

     <rdfs:isDefinedBy> <rdfs:subPropertyOf> <rdfs:seeAlso>

     <rdf:XMLLiteral> <rdf:type> <rdfs:Datatype>
     <rdf:XMLLiteral> <rdfs:subClassOf> <rdfs:Literal>
     <rdfs:Datatype> <rdfs:subClassOf> <rdfs:Class>

     <xsd:nonNegativeInteger> <rdf:type> <rdfs:Datatype>
     <xsd:string> <rdf:type> <rdfs:Datatype>

    <rdf:_1> <rdf:type> <rdf:Property>
    <rdf:_1> <rdf:type> <rdfs:ContainerMembershipProperty>
    <rdf:_1> <rdfs:domain> <rdfs:Resource>
    <rdf:_1> <rdfs:range> <rdfs:Resource>
 }

Rules
{
/*[partialRDFS]*/
Id: rdf1_rdfs4a_4b
     x  a  y
    -------------------------------
     x  <rdf:type>  <rdfs:Resource>
     a  <rdf:type>  <rdfs:Resource>
     y  <rdf:type>  <rdfs:Resource>
/*[partialRDFS]*/


Id: rdfs2
     x  a  y                                  [Constraint a != <rdf:type>]
     a  <rdfs:domain>  z                      [Constraint z != <rdfs:Resource>]
    -------------------------------
     x  <rdf:type>  z

Id: rdfs3
     x  a  u
     a  <rdfs:range>  z                       [Constraint z != <rdfs:Resource>]
    -------------------------------
     u  <rdf:type>  z

Id: rdfs5
     a  <rdfs:subPropertyOf>  b               [Constraint a != b, a != c, b != c]
     b  <rdfs:subPropertyOf>  c
    -------------------------------
     a  <rdfs:subPropertyOf>  c


Id: rdfs6
     a  <rdf:type> <rdf:Property>
    -------------------------------
     a  <rdfs:subPropertyOf>  a        
                                            

Id: rdfs7
     x  a  y                                  [Constraint a != b]
     a  <rdfs:subPropertyOf>  b
    -------------------------------
     x  b  y


Id: rdfs8_10
     x  <rdf:type>  <rdfs:Class>
    -------------------------------
     x  <rdfs:subClassOf>  <rdfs:Resource>      
     x  <rdfs:subClassOf>  x

Id: rdfs9
     a  <rdf:type>  x                         [Constraint x != y]
     x  <rdfs:subClassOf>  y
    -------------------------------
     a  <rdf:type>  y


Id: rdfs11
     x  <rdfs:subClassOf>  y                  [Constraint x != y, x != z, y != z]
     y  <rdfs:subClassOf>  z
    -------------------------------
     x  <rdfs:subClassOf>  z


Id: rdfs12
     x  <rdf:type>  <rdfs:ContainerMembershipProperty>
    -------------------------------
     x  <rdfs:subPropertyOf>  <rdfs:member>


Id: rdfs13
     x  <rdf:type>  <rdfs:Datatype>
    -------------------------------
     x  <rdfs:subClassOf>  <rdfs:Literal>



/********************************************************************************
 * Knora-specific consistency checks                                            *
 ********************************************************************************/


/*
 * Inference rules that construct tables (i.e. named graphs) used to optimize the consistency rules below.
 */

// Constructs a table of subjects belonging to classes that have owl:cardinality 1 on some property p.
Id: cardinality_1_table
    i <rdf:type> r
    r <owl:cardinality> "1"^^xsd:nonNegativeInteger
    r <owl:onProperty> p
    ------------------------------------
    i p r [Context <onto:_cardinality_1_table>]

// Constructs a table of subjects belonging to classes that have owl:minCardinality 1 on some property p.
Id: minCardinality_1_table
    i <rdf:type> r
    r <owl:minCardinality> "1"^^xsd:nonNegativeInteger
    r <owl:onProperty> p
    ------------------------------------
    i p r [Context <onto:_minCardinality_1_table>]

// Constructs a table of subjects belonging to classes that have owl:maxCardinality 1 on some property p.
Id: maxCardinality_1_table
    i <rdf:type> r
    r <owl:maxCardinality> "1"^^xsd:nonNegativeInteger
    r <owl:onProperty> p
    ------------------------------------
    i p r [Context <onto:_maxCardinality_1_table>]


/*
 * A consistency rule that disallows empty strings.
 */
 Consistency: empty_string
     i p ""
     ------------------------------------


/*
 * Consistency rules for subject and object class constraints.
 */

// Every subproperty of knora-base:resourceProperty must have a knora-base:objectClassConstraint.
Consistency: object_class_constraint_required
    p <rdfs:subPropertyOf> <knora-base:resourceProperty> [Constraint p != <knora-base:resourceProperty>]
    ------------------------------------
    p <knora-base:objectClassConstraint> c


// The subject of a property must belong to the class specified in the property's knora-base:subjectClassConstraint.
Consistency: subject_class_constraint
    p <knora-base:subjectClassConstraint> t
    i p j
    ------------------------------------
    i <rdf:type> t

// The object of an object property must belong to the class specified in the property's knora-base:objectClassConstraint.
Consistency: object_class_constraint
    p <knora-base:objectClassConstraint> t
    i p j
    ------------------------------------
    j <rdf:type> t


/*
 * Consistency rules for cardinalities on any properties.
 */

// With owl:minCardinality 1, the property must have an object. It's OK if the object is marked as deleted.
Consistency: min_cardinality_1_any_object
    i p r [Context <onto:_minCardinality_1_table>]
    ------------------------------------
    i p j

// With owl:cardinality 1, the property must have an object. It's OK if the object is marked as deleted.
Consistency: cardinality_1_not_less_any_object
    i p r [Context <onto:_cardinality_1_table>]
    ------------------------------------
    i p j


/*
 * Consistency rule for owl:cardinality 1 with rdfs:label.
 */
Consistency: cardinality_1_not_greater_rdfs_label
    i <rdfs:label> r [Context <onto:_cardinality_1_table>]
    i <rdfs:label> j [Constraint j != k]
    i <rdfs:label> k
    ------------------------------------


/*
 * Consistency rules for cardinalities on properties whose objects cannot be marked as deleted
 * using the boolean flag knora-base:isDeleted.
 */

// With owl:maxCardinality 1, if the object of the property cannot be marked as deleted, just check that there
// is not more than one object.
Consistency: max_cardinality_1_without_deletion_flag
    i p r [Context <onto:_maxCardinality_1_table>]
    p <rdfs:subPropertyOf> <knora-base:objectCannotBeMarkedAsDeleted>
    i p j [Constraint j != k]
    i p k [Cut]
    ------------------------------------

// With owl:cardinality 1, if the object of the property cannot be marked as deleted, just check that there
// is not more than one object.
Consistency: cardinality_1_not_greater_without_deletion_flag
    i p r [Context <onto:_cardinality_1_table>]
    p <rdfs:subPropertyOf> <knora-base:objectCannotBeMarkedAsDeleted>
    i p j [Constraint j != k]
    i p k [Cut]
    ------------------------------------


/*
 * Consistency rules for cardinalities on properties whose objects can be marked as deleted
 * using the boolean flag knora-base:isDeleted. Here we take advantage of the fact that every class
 * that *allows* knora-base:isDeleted also *requires* knora-base:isDeleted. So an object that can be
 * marked as deleted, but has not been marked as deleted, will have knora-base:isDeleted false.
 */

// With owl:maxCardinality 1, if the object of the property can be marked as deleted, there must not be
// more than one non-deleted object. (In other words, it's OK if there is more than one object,
// as long only one object has knora-base:isDeleted false.)
Consistency: max_cardinality_1_with_deletion_flag
    i p r [Context <onto:_maxCardinality_1_table>]
    i p j [Constraint j != k]
    i p k [Cut]
    j <knora-base:isDeleted> "false"^^xsd:boolean
    k <knora-base:isDeleted> "false"^^xsd:boolean
    ------------------------------------

// With owl:cardinality 1, if the object of the property can be marked as deleted, there must not be
// more than one non-deleted object. (In other words, it's OK if there is more than one object,
// as long only one object has knora-base:isDeleted false.)
Consistency: cardinality_1_not_greater_with_deletion_flag
    i p r [Context <onto:_cardinality_1_table>]
    i p j [Constraint j != k]
    i p k [Cut]
    j <knora-base:isDeleted> "false"^^xsd:boolean
    k <knora-base:isDeleted> "false"^^xsd:boolean
    ------------------------------------

// If a resource has a property pointing to a resource or value, the resource class must have
// some cardinality for that property.
Consistency: resource_prop_cardinality_any
    i <knora-base:resourceProperty> j
    ------------------------------------
    i p j
    i <rdf:type> r
    r <owl:onProperty> p


// If a value has a subproperty of knora-base:valueHas, the value class must have
// some cardinality for that property.
Consistency: value_prop_cardinality_any
    i <knora-base:valueHas> j
    ------------------------------------
    i p j
    i <rdf:type> r
    r <owl:onProperty> p


/*
Consistency: standoff_parent
    i <knora-base:standoffTagHasStartParent> j
    i <rdf:type> t
    ------------------------------------
    t <knora-base:standoffParentClassConstraint> c
    j <rdf:type> c
*/

}
